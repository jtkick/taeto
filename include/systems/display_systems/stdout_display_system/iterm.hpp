#ifndef SYSTEMS_DISPLAY_SYSTEMS_STDOUT_DISPLAY_SYSTEM_ITERM_HPP_
#define SYSTEMS_DISPLAY_SYSTEMS_STDOUT_DISPLAY_SYSTEM_ITERM_HPP_

#include <cstdint>

int const kColorTable[256][3] = {
    // 8-bit, RGB hex
    // Primary 3-bit (8 colors). Unique representation!
    { 0x00, 0x00, 0x00 },
    { 0x80, 0x00, 0x00 },
    { 0x00, 0x80, 0x00 },
    { 0x80, 0x80, 0x00 },
    { 0x00, 0x00, 0x80 },
    { 0x80, 0x00, 0x80 },
    { 0x00, 0x80, 0x80 },
    { 0xc0, 0xc0, 0xc0 },

    // Equivalent "bright" versions of original 8 colors.
    { 0x80, 0x80, 0x80 },
    { 0xff, 0x00, 0x00 },
    { 0x00, 0xff, 0x00 },
    { 0xff, 0xff, 0x00 },
    { 0x00, 0x00, 0xff },
    { 0xff, 0x00, 0xff },
    { 0x00, 0xff, 0xff },
    { 0xff, 0xff, 0xff },

    // Strictly ascending.
    { 0x00, 0x00, 0x00 },
    { 0x00, 0x00, 0x5f },
    { 0x00, 0x00, 0x87 },
    { 0x00, 0x00, 0xaf },
    { 0x00, 0x00, 0xd7 },
    { 0x00, 0x00, 0xff },
    { 0x00, 0x5f, 0x00 },
    { 0x00, 0x5f, 0x5f },
    { 0x00, 0x5f, 0x87 },
    { 0x00, 0x5f, 0xaf },
    { 0x00, 0x5f, 0xd7 },
    { 0x00, 0x5f, 0xff },
    { 0x00, 0x87, 0x00 },
    { 0x00, 0x87, 0x5f },
    { 0x00, 0x87, 0x87 },
    { 0x00, 0x87, 0xaf },
    { 0x00, 0x87, 0xd7 },
    { 0x00, 0x87, 0xff },
    { 0x00, 0xaf, 0x00 },
    { 0x00, 0xaf, 0x5f },
    { 0x00, 0xaf, 0x87 },
    { 0x00, 0xaf, 0xaf },
    { 0x00, 0xaf, 0xd7 },
    { 0x00, 0xaf, 0xff },
    { 0x00, 0xd7, 0x00 },
    { 0x00, 0xd7, 0x5f },
    { 0x00, 0xd7, 0x87 },
    { 0x00, 0xd7, 0xaf },
    { 0x00, 0xd7, 0xd7 },
    { 0x00, 0xd7, 0xff },
    { 0x00, 0xff, 0x00 },
    { 0x00, 0xff, 0x5f },
    { 0x00, 0xff, 0x87 },
    { 0x00, 0xff, 0xaf },
    { 0x00, 0xff, 0xd7 },
    { 0x00, 0xff, 0xff },
    { 0x5f, 0x00, 0x00 },
    { 0x5f, 0x00, 0x5f },
    { 0x5f, 0x00, 0x87 },
    { 0x5f, 0x00, 0xaf },
    { 0x5f, 0x00, 0xd7 },
    { 0x5f, 0x00, 0xff },
    { 0x5f, 0x5f, 0x00 },
    { 0x5f, 0x5f, 0x5f },
    { 0x5f, 0x5f, 0x87 },
    { 0x5f, 0x5f, 0xaf },
    { 0x5f, 0x5f, 0xd7 },
    { 0x5f, 0x5f, 0xff },
    { 0x5f, 0x87, 0x00 },
    { 0x5f, 0x87, 0x5f },
    { 0x5f, 0x87, 0x87 },
    { 0x5f, 0x87, 0xaf },
    { 0x5f, 0x87, 0xd7 },
    { 0x5f, 0x87, 0xff },
    { 0x5f, 0xaf, 0x00 },
    { 0x5f, 0xaf, 0x5f },
    { 0x5f, 0xaf, 0x87 },
    { 0x5f, 0xaf, 0xaf },
    { 0x5f, 0xaf, 0xd7 },
    { 0x5f, 0xaf, 0xff },
    { 0x5f, 0xd7, 0x00 },
    { 0x5f, 0xd7, 0x5f },
    { 0x5f, 0xd7, 0x87 },
    { 0x5f, 0xd7, 0xaf },
    { 0x5f, 0xd7, 0xd7 },
    { 0x5f, 0xd7, 0xff },
    { 0x5f, 0xff, 0x00 },
    { 0x5f, 0xff, 0x5f },
    { 0x5f, 0xff, 0x87 },
    { 0x5f, 0xff, 0xaf },
    { 0x5f, 0xff, 0xd7 },
    { 0x5f, 0xff, 0xff },
    { 0x87, 0x00, 0x00 },
    { 0x87, 0x00, 0x5f },
    { 0x87, 0x00, 0x87 },
    { 0x87, 0x00, 0xaf },
    { 0x87, 0x00, 0xd7 },
    { 0x87, 0x00, 0xff },
    { 0x87, 0x5f, 0x00 },
    { 0x87, 0x5f, 0x5f },
    { 0x87, 0x5f, 0x87 },
    { 0x87, 0x5f, 0xaf },
    { 0x87, 0x5f, 0xd7 },
    { 0x87, 0x5f, 0xff },
    { 0x87, 0x87, 0x00 },
    { 0x87, 0x87, 0x5f },
    { 0x87, 0x87, 0x87 },
    { 0x87, 0x87, 0xaf },
    { 0x87, 0x87, 0xd7 },
    { 0x87, 0x87, 0xff },
    { 0x87, 0xaf, 0x00 },
    { 0x87, 0xaf, 0x5f },
    { 0x87, 0xaf, 0x87 },
    { 0x87, 0xaf, 0xaf },
    { 0x87, 0xaf, 0xd7 },
    { 0x87, 0xaf, 0xff },
    { 0x87, 0xd7, 0x00 },
    { 0x87, 0xd7, 0x5f },
    { 0x87, 0xd7, 0x87 },
    { 0x87, 0xd7, 0xaf },
    { 0x87, 0xd7, 0xd7 },
    { 0x87, 0xd7, 0xff },
    { 0x87, 0xff, 0x00 },
    { 0x87, 0xff, 0x5f },
    { 0x87, 0xff, 0x87 },
    { 0x87, 0xff, 0xaf },
    { 0x87, 0xff, 0xd7 },
    { 0x87, 0xff, 0xff },
    { 0xaf, 0x00, 0x00 },
    { 0xaf, 0x00, 0x5f },
    { 0xaf, 0x00, 0x87 },
    { 0xaf, 0x00, 0xaf },
    { 0xaf, 0x00, 0xd7 },
    { 0xaf, 0x00, 0xff },
    { 0xaf, 0x5f, 0x00 },
    { 0xaf, 0x5f, 0x5f },
    { 0xaf, 0x5f, 0x87 },
    { 0xaf, 0x5f, 0xaf },
    { 0xaf, 0x5f, 0xd7 },
    { 0xaf, 0x5f, 0xff },
    { 0xaf, 0x87, 0x00 },
    { 0xaf, 0x87, 0x5f },
    { 0xaf, 0x87, 0x87 },
    { 0xaf, 0x87, 0xaf },
    { 0xaf, 0x87, 0xd7 },
    { 0xaf, 0x87, 0xff },
    { 0xaf, 0xaf, 0x00 },
    { 0xaf, 0xaf, 0x5f },
    { 0xaf, 0xaf, 0x87 },
    { 0xaf, 0xaf, 0xaf },
    { 0xaf, 0xaf, 0xd7 },
    { 0xaf, 0xaf, 0xff },
    { 0xaf, 0xd7, 0x00 },
    { 0xaf, 0xd7, 0x5f },
    { 0xaf, 0xd7, 0x87 },
    { 0xaf, 0xd7, 0xaf },
    { 0xaf, 0xd7, 0xd7 },
    { 0xaf, 0xd7, 0xff },
    { 0xaf, 0xff, 0x00 },
    { 0xaf, 0xff, 0x5f },
    { 0xaf, 0xff, 0x87 },
    { 0xaf, 0xff, 0xaf },
    { 0xaf, 0xff, 0xd7 },
    { 0xaf, 0xff, 0xff },
    { 0xd7, 0x00, 0x00 },
    { 0xd7, 0x00, 0x5f },
    { 0xd7, 0x00, 0x87 },
    { 0xd7, 0x00, 0xaf },
    { 0xd7, 0x00, 0xd7 },
    { 0xd7, 0x00, 0xff },
    { 0xd7, 0x5f, 0x00 },
    { 0xd7, 0x5f, 0x5f },
    { 0xd7, 0x5f, 0x87 },
    { 0xd7, 0x5f, 0xaf },
    { 0xd7, 0x5f, 0xd7 },
    { 0xd7, 0x5f, 0xff },
    { 0xd7, 0x87, 0x00 },
    { 0xd7, 0x87, 0x5f },
    { 0xd7, 0x87, 0x87 },
    { 0xd7, 0x87, 0xaf },
    { 0xd7, 0x87, 0xd7 },
    { 0xd7, 0x87, 0xff },
    { 0xd7, 0xaf, 0x00 },
    { 0xd7, 0xaf, 0x5f },
    { 0xd7, 0xaf, 0x87 },
    { 0xd7, 0xaf, 0xaf },
    { 0xd7, 0xaf, 0xd7 },
    { 0xd7, 0xaf, 0xff },
    { 0xd7, 0xd7, 0x00 },
    { 0xd7, 0xd7, 0x5f },
    { 0xd7, 0xd7, 0x87 },
    { 0xd7, 0xd7, 0xaf },
    { 0xd7, 0xd7, 0xd7 },
    { 0xd7, 0xd7, 0xff },
    { 0xd7, 0xff, 0x00 },
    { 0xd7, 0xff, 0x5f },
    { 0xd7, 0xff, 0x87 },
    { 0xd7, 0xff, 0xaf },
    { 0xd7, 0xff, 0xd7 },
    { 0xd7, 0xff, 0xff },
    { 0xff, 0x00, 0x00 },
    { 0xff, 0x00, 0x5f },
    { 0xff, 0x00, 0x87 },
    { 0xff, 0x00, 0xaf },
    { 0xff, 0x00, 0xd7 },
    { 0xff, 0x00, 0xff },
    { 0xff, 0x5f, 0x00 },
    { 0xff, 0x5f, 0x5f },
    { 0xff, 0x5f, 0x87 },
    { 0xff, 0x5f, 0xaf },
    { 0xff, 0x5f, 0xd7 },
    { 0xff, 0x5f, 0xff },
    { 0xff, 0x87, 0x00 },
    { 0xff, 0x87, 0x5f },
    { 0xff, 0x87, 0x87 },
    { 0xff, 0x87, 0xaf },
    { 0xff, 0x87, 0xd7 },
    { 0xff, 0x87, 0xff },
    { 0xff, 0xaf, 0x00 },
    { 0xff, 0xaf, 0x5f },
    { 0xff, 0xaf, 0x87 },
    { 0xff, 0xaf, 0xaf },
    { 0xff, 0xaf, 0xd7 },
    { 0xff, 0xaf, 0xff },
    { 0xff, 0xd7, 0x00 },
    { 0xff, 0xd7, 0x5f },
    { 0xff, 0xd7, 0x87 },
    { 0xff, 0xd7, 0xaf },
    { 0xff, 0xd7, 0xd7 },
    { 0xff, 0xd7, 0xff },
    { 0xff, 0xff, 0x00 },
    { 0xff, 0xff, 0x5f },
    { 0xff, 0xff, 0x87 },
    { 0xff, 0xff, 0xaf },
    { 0xff, 0xff, 0xd7 },
    { 0xff, 0xff, 0xff },

    // Gray-scale range.
    { 0x08, 0x08, 0x08 },
    { 0x12, 0x12, 0x12 },
    { 0x1c, 0x1c, 0x1c },
    { 0x26, 0x26, 0x26 },
    { 0x30, 0x30, 0x30 },
    { 0x3a, 0x3a, 0x3a },
    { 0x44, 0x44, 0x44 },
    { 0x4e, 0x4e, 0x4e },
    { 0x58, 0x58, 0x58 },
    { 0x62, 0x62, 0x62 },
    { 0x6c, 0x6c, 0x6c },
    { 0x76, 0x76, 0x76 },
    { 0x80, 0x80, 0x80 },
    { 0x8a, 0x8a, 0x8a },
    { 0x94, 0x94, 0x94 },
    { 0x9e, 0x9e, 0x9e },
    { 0xa8, 0xa8, 0xa8 },
    { 0xb2, 0xb2, 0xb2 },
    { 0xbc, 0xbc, 0xbc },
    { 0xc6, 0xc6, 0xc6 },
    { 0xd0, 0xd0, 0xd0 },
    { 0xda, 0xda, 0xda },
    { 0xe4, 0xe4, 0xe4 },
    { 0xee, 0xee, 0xee },
};

namespace taeto
{

/*
 * Takes an iterm color ID and returns an ivec3 with the corresponding RGB color
 * values.
 */
inline glm::ivec3 vec3_from_iterm(uint8_t iterm_color)
{
    // Pull RGB values from lookup table
    int[3] c = kColorTable[iterm_color];
    return glm::ivec3(c[0], c[1], c[2]);
}

/*
 * Takes an RGB ivec3 and returns the iterm color ID closest to the given color.
 */
inline uint8_t iterm_from_vec3(glm::vec3 color) const
{
    int increments_length = 6;
    int increments[6] = { 0x00, 0x5f, 0x87, 0xaf, 0xd7, 0xff };

    int closest_color[3] = { 0 };

    for (int color = 0; color < 3; color++)
    {
        for (int i = 0; i < increments_length - 1; i++)
        {
            int smaller = increments[i];
            int bigger = increments[i+1];

            if (smaller <= rgba[color] && rgba[color] <= bigger)
            {
                int smaller_diff = std::abs(smaller - rgba[color]);
                int bigger_diff = std::abs(bigger - rgba[color]);

                if (smaller_diff < bigger_diff)
                    closest_color[color] = smaller;
                else
                    closest_color[color] = bigger;
            }
        }
    }

    // Find closest color in table
    int match_index;
    for (match_index = 0; match_index < 256; match_index++)
    {
        // Compare all color values
        if (closest_color[0] == kColorTable[match_index][0] &&
            closest_color[1] == kColorTable[match_index][1] &&
            closest_color[2] == kColorTable[match_index][2])
            break;

    }

    // If index is 256, there wasn't a match
    if (match_index == 256)
        throw std::runtime_error("Couldn't find valid iterm color in table.");

    return match_index;
}

}   // namespace taeto

#endif  // SYSTEMS_DISPLAY_SYSTEMS_STDOUT_DISPLAY_SYSTEM_ITERM_HPP_
