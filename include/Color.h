#ifndef COLOR_H
#define COLOR_H

#include <cstdint>
#include <cstdlib>

class Color
{
    private:
    
        uint8_t rgba[4] = { 255 };
        
        // Since iterm colors don't follow a strict rule,
        // we're just going to use a lookup table for going back to RGB
        int COLOR_TABLE[256][3] = {
            // 8-bit, RGB hex
            // Primary 3-bit (8 colors). Unique representation!
            { 0x00, 0x00, 0x00 },
            { 0x80, 0x00, 0x00 },
            { 0x00, 0x80, 0x00 },
            { 0x80, 0x80, 0x00 },
            { 0x00, 0x00, 0x80 },
            { 0x80, 0x00, 0x80 },
            { 0x00, 0x80, 0x80 },
            { 0xc0, 0xc0, 0xc0 },

            // Equivalent "bright" versions of original 8 colors.
            { 0x80, 0x80, 0x80 },
            { 0xff, 0x00, 0x00 },
            { 0x00, 0xff, 0x00 },
            { 0xff, 0xff, 0x00 },
            { 0x00, 0x00, 0xff },
            { 0xff, 0x00, 0xff },
            { 0x00, 0xff, 0xff },
            { 0xff, 0xff, 0xff },

            // Strictly ascending.
            { 0x00, 0x00, 0x00 },
            { 0x00, 0x00, 0x5f },
            { 0x00, 0x00, 0x87 },
            { 0x00, 0x00, 0xaf },
            { 0x00, 0x00, 0xd7 },
            { 0x00, 0x00, 0xff },
            { 0x00, 0x5f, 0x00 },
            { 0x00, 0x5f, 0x5f },
            { 0x00, 0x5f, 0x87 },
            { 0x00, 0x5f, 0xaf },
            { 0x00, 0x5f, 0xd7 },
            { 0x00, 0x5f, 0xff },
            { 0x00, 0x87, 0x00 },
            { 0x00, 0x87, 0x5f },
            { 0x00, 0x87, 0x87 },
            { 0x00, 0x87, 0xaf },
            { 0x00, 0x87, 0xd7 },
            { 0x00, 0x87, 0xff },
            { 0x00, 0xaf, 0x00 },
            { 0x00, 0xaf, 0x5f },
            { 0x00, 0xaf, 0x87 },
            { 0x00, 0xaf, 0xaf },
            { 0x00, 0xaf, 0xd7 },
            { 0x00, 0xaf, 0xff },
            { 0x00, 0xd7, 0x00 },
            { 0x00, 0xd7, 0x5f },
            { 0x00, 0xd7, 0x87 },
            { 0x00, 0xd7, 0xaf },
            { 0x00, 0xd7, 0xd7 },
            { 0x00, 0xd7, 0xff },
            { 0x00, 0xff, 0x00 },
            { 0x00, 0xff, 0x5f },
            { 0x00, 0xff, 0x87 },
            { 0x00, 0xff, 0xaf },
            { 0x00, 0xff, 0xd7 },
            { 0x00, 0xff, 0xff },
            { 0x5f, 0x00, 0x00 },
            { 0x5f, 0x00, 0x5f },
            { 0x5f, 0x00, 0x87 },
            { 0x5f, 0x00, 0xaf },
            { 0x5f, 0x00, 0xd7 },
            { 0x5f, 0x00, 0xff },
            { 0x5f, 0x5f, 0x00 },
            { 0x5f, 0x5f, 0x5f },
            { 0x5f, 0x5f, 0x87 },
            { 0x5f, 0x5f, 0xaf },
            { 0x5f, 0x5f, 0xd7 },
            { 0x5f, 0x5f, 0xff },
            { 0x5f, 0x87, 0x00 },
            { 0x5f, 0x87, 0x5f },
            { 0x5f, 0x87, 0x87 },
            { 0x5f, 0x87, 0xaf },
            { 0x5f, 0x87, 0xd7 },
            { 0x5f, 0x87, 0xff },
            { 0x5f, 0xaf, 0x00 },
            { 0x5f, 0xaf, 0x5f },
            { 0x5f, 0xaf, 0x87 },
            { 0x5f, 0xaf, 0xaf },
            { 0x5f, 0xaf, 0xd7 },
            { 0x5f, 0xaf, 0xff },
            { 0x5f, 0xd7, 0x00 },
            { 0x5f, 0xd7, 0x5f },
            { 0x5f, 0xd7, 0x87 },
            { 0x5f, 0xd7, 0xaf },
            { 0x5f, 0xd7, 0xd7 },
            { 0x5f, 0xd7, 0xff },
            { 0x5f, 0xff, 0x00 },
            { 0x5f, 0xff, 0x5f },
            { 0x5f, 0xff, 0x87 },
            { 0x5f, 0xff, 0xaf },
            { 0x5f, 0xff, 0xd7 },
            { 0x5f, 0xff, 0xff },
            { 0x87, 0x00, 0x00 },
            { 0x87, 0x00, 0x5f },
            { 0x87, 0x00, 0x87 },
            { 0x87, 0x00, 0xaf },
            { 0x87, 0x00, 0xd7 },
            { 0x87, 0x00, 0xff },
            { 0x87, 0x5f, 0x00 },
            { 0x87, 0x5f, 0x5f },
            { 0x87, 0x5f, 0x87 },
            { 0x87, 0x5f, 0xaf },
            { 0x87, 0x5f, 0xd7 },
            { 0x87, 0x5f, 0xff },
            { 0x87, 0x87, 0x00 },
            { 0x87, 0x87, 0x5f },
            { 0x87, 0x87, 0x87 },
            { 0x87, 0x87, 0xaf },
            { 0x87, 0x87, 0xd7 },
            { 0x87, 0x87, 0xff },
            { 0x87, 0xaf, 0x00 },
            { 0x87, 0xaf, 0x5f },
            { 0x87, 0xaf, 0x87 },
            { 0x87, 0xaf, 0xaf },
            { 0x87, 0xaf, 0xd7 },
            { 0x87, 0xaf, 0xff },
            { 0x87, 0xd7, 0x00 },
            { 0x87, 0xd7, 0x5f },
            { 0x87, 0xd7, 0x87 },
            { 0x87, 0xd7, 0xaf },
            { 0x87, 0xd7, 0xd7 },
            { 0x87, 0xd7, 0xff },
            { 0x87, 0xff, 0x00 },
            { 0x87, 0xff, 0x5f },
            { 0x87, 0xff, 0x87 },
            { 0x87, 0xff, 0xaf },
            { 0x87, 0xff, 0xd7 },
            { 0x87, 0xff, 0xff },
            { 0xaf, 0x00, 0x00 },
            { 0xaf, 0x00, 0x5f },
            { 0xaf, 0x00, 0x87 },
            { 0xaf, 0x00, 0xaf },
            { 0xaf, 0x00, 0xd7 },
            { 0xaf, 0x00, 0xff },
            { 0xaf, 0x5f, 0x00 },
            { 0xaf, 0x5f, 0x5f },
            { 0xaf, 0x5f, 0x87 },
            { 0xaf, 0x5f, 0xaf },
            { 0xaf, 0x5f, 0xd7 },
            { 0xaf, 0x5f, 0xff },
            { 0xaf, 0x87, 0x00 },
            { 0xaf, 0x87, 0x5f },
            { 0xaf, 0x87, 0x87 },
            { 0xaf, 0x87, 0xaf },
            { 0xaf, 0x87, 0xd7 },
            { 0xaf, 0x87, 0xff },
            { 0xaf, 0xaf, 0x00 },
            { 0xaf, 0xaf, 0x5f },
            { 0xaf, 0xaf, 0x87 },
            { 0xaf, 0xaf, 0xaf },
            { 0xaf, 0xaf, 0xd7 },
            { 0xaf, 0xaf, 0xff },
            { 0xaf, 0xd7, 0x00 },
            { 0xaf, 0xd7, 0x5f },
            { 0xaf, 0xd7, 0x87 },
            { 0xaf, 0xd7, 0xaf },
            { 0xaf, 0xd7, 0xd7 },
            { 0xaf, 0xd7, 0xff },
            { 0xaf, 0xff, 0x00 },
            { 0xaf, 0xff, 0x5f },
            { 0xaf, 0xff, 0x87 },
            { 0xaf, 0xff, 0xaf },
            { 0xaf, 0xff, 0xd7 },
            { 0xaf, 0xff, 0xff },
            { 0xd7, 0x00, 0x00 },
            { 0xd7, 0x00, 0x5f },
            { 0xd7, 0x00, 0x87 },
            { 0xd7, 0x00, 0xaf },
            { 0xd7, 0x00, 0xd7 },
            { 0xd7, 0x00, 0xff },
            { 0xd7, 0x5f, 0x00 },
            { 0xd7, 0x5f, 0x5f },
            { 0xd7, 0x5f, 0x87 },
            { 0xd7, 0x5f, 0xaf },
            { 0xd7, 0x5f, 0xd7 },
            { 0xd7, 0x5f, 0xff },
            { 0xd7, 0x87, 0x00 },
            { 0xd7, 0x87, 0x5f },
            { 0xd7, 0x87, 0x87 },
            { 0xd7, 0x87, 0xaf },
            { 0xd7, 0x87, 0xd7 },
            { 0xd7, 0x87, 0xff },
            { 0xd7, 0xaf, 0x00 },
            { 0xd7, 0xaf, 0x5f },
            { 0xd7, 0xaf, 0x87 },
            { 0xd7, 0xaf, 0xaf },
            { 0xd7, 0xaf, 0xd7 },
            { 0xd7, 0xaf, 0xff },
            { 0xd7, 0xd7, 0x00 },
            { 0xd7, 0xd7, 0x5f },
            { 0xd7, 0xd7, 0x87 },
            { 0xd7, 0xd7, 0xaf },
            { 0xd7, 0xd7, 0xd7 },
            { 0xd7, 0xd7, 0xff },
            { 0xd7, 0xff, 0x00 },
            { 0xd7, 0xff, 0x5f },
            { 0xd7, 0xff, 0x87 },
            { 0xd7, 0xff, 0xaf },
            { 0xd7, 0xff, 0xd7 },
            { 0xd7, 0xff, 0xff },
            { 0xff, 0x00, 0x00 },
            { 0xff, 0x00, 0x5f },
            { 0xff, 0x00, 0x87 },
            { 0xff, 0x00, 0xaf },
            { 0xff, 0x00, 0xd7 },
            { 0xff, 0x00, 0xff },
            { 0xff, 0x5f, 0x00 },
            { 0xff, 0x5f, 0x5f },
            { 0xff, 0x5f, 0x87 },
            { 0xff, 0x5f, 0xaf },
            { 0xff, 0x5f, 0xd7 },
            { 0xff, 0x5f, 0xff },
            { 0xff, 0x87, 0x00 },
            { 0xff, 0x87, 0x5f },
            { 0xff, 0x87, 0x87 },
            { 0xff, 0x87, 0xaf },
            { 0xff, 0x87, 0xd7 },
            { 0xff, 0x87, 0xff },
            { 0xff, 0xaf, 0x00 },
            { 0xff, 0xaf, 0x5f },
            { 0xff, 0xaf, 0x87 },
            { 0xff, 0xaf, 0xaf },
            { 0xff, 0xaf, 0xd7 },
            { 0xff, 0xaf, 0xff },
            { 0xff, 0xd7, 0x00 },
            { 0xff, 0xd7, 0x5f },
            { 0xff, 0xd7, 0x87 },
            { 0xff, 0xd7, 0xaf },
            { 0xff, 0xd7, 0xd7 },
            { 0xff, 0xd7, 0xff },
            { 0xff, 0xff, 0x00 },
            { 0xff, 0xff, 0x5f },
            { 0xff, 0xff, 0x87 },
            { 0xff, 0xff, 0xaf },
            { 0xff, 0xff, 0xd7 },
            { 0xff, 0xff, 0xff },

            // Gray-scale range.
            { 0x08, 0x08, 0x08 },
            { 0x12, 0x12, 0x12 },
            { 0x1c, 0x1c, 0x1c },
            { 0x26, 0x26, 0x26 },
            { 0x30, 0x30, 0x30 },
            { 0x3a, 0x3a, 0x3a },
            { 0x44, 0x44, 0x44 },
            { 0x4e, 0x4e, 0x4e },
            { 0x58, 0x58, 0x58 },
            { 0x62, 0x62, 0x62 },
            { 0x6c, 0x6c, 0x6c },
            { 0x76, 0x76, 0x76 },
            { 0x80, 0x80, 0x80 },
            { 0x8a, 0x8a, 0x8a },
            { 0x94, 0x94, 0x94 },
            { 0x9e, 0x9e, 0x9e },
            { 0xa8, 0xa8, 0xa8 },
            { 0xb2, 0xb2, 0xb2 },
            { 0xbc, 0xbc, 0xbc },
            { 0xc6, 0xc6, 0xc6 },
            { 0xd0, 0xd0, 0xd0 },
            { 0xda, 0xda, 0xda },
            { 0xe4, 0xe4, 0xe4 },
            { 0xee, 0xee, 0xee },
        };

    public:
    
        Color();
        
        Color(uint8_t, uint8_t, uint8_t);
        
        Color(uint8_t, uint8_t, uint8_t, uint8_t);
    
        uint8_t get_red() const;
        
        uint8_t get_green() const;
        
        uint8_t get_blue() const;
        
        uint8_t get_alpha() const;
        
        void set_red(uint8_t);
        
        void set_green(uint8_t);
        
        void set_blue(uint8_t);
        
        void set_alpha(uint8_t);
        
        void set_all(uint8_t, uint8_t, uint8_t, uint8_t);
        
        void set_brightness(uint8_t);
    
        void from_iterm(uint8_t);
        
        uint8_t to_iterm() const;
        
        Color operator * (const Color&);
        
        // Additive color addition
        Color operator + (const Color&);
        
        // Subtractive color addition
        Color operator & (const Color&);
        
        Color operator += (const Color&);
        
        //void operator = (const Color&);
        
};

#endif
