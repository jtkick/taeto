// Schemas for any in-game objects

namespace Taeto.objects

// Any point in the game world
// Origin at (0, 0, 0)
struct Point {
    x:long = 0;
    y:long = 0;
    z:long = 0;
}

// RGBA color
struct Color {
    red:uint8;
    green:uint8;
    blue:uint8;
    alpha:uint8;
}

// Cartesian direction in space
struct Vector {
    x:char;
    y:char;
    z:char;
}

// Smallest render-able object that all objects are made of
struct Pixel {
    char:uint8;
    Color:fg_color;
    Color:bg_color;
    bool:bold;
    bool:italic;
    bool:underline;
    bool:strikethrough;
    Vector:normal;
    bool:collide;
}

// Sprite that can be rendered
struct Sprite {
    height:ulong;
    width:ulong;
    pixels:[Pixel];
    scaling_factor:double;
}

// Basically a sprite, but with different frames for different distances from
// the camera
struct MipmapEntry {
    // If the object's distance from the camera multiplied by the focal length
    // of the camera is greater than this entries min_distance, but less than
    // the next entry's min_distance, then this entry will be rendered
    min_distance:ulong;
    sprite:Sprite;
}
struct Mipmap {
    levels:[MipmapEntry];
}

// Any type that can be rendered
// If a Mipmap, the mipmap logic will be used
// If a Sprite, the engine will interpolate or expurgate based on distance
union Renderable {
    Mipmap,
    Sprite
}

// Literally any object that exists in the game, lights and characters included
table Object {
    // Position in the game world. If the object is renderable, it's top left
    // corner will be at the position
    position:Point;

    // Speed
    x_speed:double;
    y_speed:double;
    z_speed:double;

    // Any forces acting on the object
    x_force:double;
    y_force:double;
    z_force:double;

    // Mass in relation to the forces acting on object
    mass:double;

    // Sprite to render if any
    renderable:Renderable;

    // All sub-object, these objects move along with the parent object, where
    // the location is the offset from the parent object, NOT the origin
    sub_objects:[Object];

    // True if this sprite should collide with any other sprite that also has
    // this member set to True
    collide:bool = False;

    // True if physics system should check for collisions with this sprite
    // If this is false and 'collide' is true, this sprite will collide with
    // other sprites, but the physics system won't check with this sprite
    detect_collisions:bool = False;

    // Let the engine decide the color of this sprite based on light sources
    respect_light_sources:bool = False;

    // Whether or not engine looks at normal to determine light brightness
    // Only applies if respect_light_sources is true
    use_normal_mapping:bool = False;

    // If this sprite is entirely off screen, this determines if the animate()
    // function is called
    animate_off_screen:bool = False;

    // Tags used by scenes to keep track of any object properties
    tags:ulong;
}

struct Light {
    // Light color to emit if
    color:Color;
    brightness:double;
}
